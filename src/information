@OneToMany(cascade = CascadeType.ALL)
- łączy w sobie wszystkie ustawienia kaskadowości. Dzięki temu można np. pominąć zapisywanie do sesji (session.save) obiektu, będącego w relacji. Zostanie to wykonane za nas.


Usuwanie danych:
1. Usuwanie danych z tabeli, które są w relacji za pomocą HQL nie jest możliwe.
2. Jeżeli żywasz session.delete dla całej tabeli to należy pobrać listę obiektów i następnie każdy obiekt w pętli należy dodać do session.delete
- jeżeli masz włączoną relację Casscade.REMOVE to zostaną usunięte encje i ich relacje (dzieci);
-jeżeli nie masz włączonej kaskadowości to w takim wypadku zostanie usunięta encja rodzic, a encje dzieci zostaną nie ruszone

----------------------------------------------
Różnica pomiędzy save(), persist():
1. Metoda save zwróci od razu id zapisane obiektu, persist to metoda void(także jeżeli potrzebujesz natychmiast takiego identyfikatora to używaj save)
2. Persist metoda nie gwarantuje, że identyfikator zostanie dodany od razu. Przypisanie identyfikatora, może nastąpić podczas wywołania flush();
3. Metode save możemy wywołać poza tranzakcją(uwaga: jeżeli użyjemy jej poza tranzakcją i mamy włączoną kaskadowość wtedy zostanie zapisany tylko główny obiekt, chyba że użyjemy flush)

Różnica pomiędzy save() i saveORUpdate():
- save() zawsze wywołuje INSERT i zapisuje obiekt do bazy danych
- saveOrUpdate () jest bardziej uniwersalna, ale tworzy dodatkowy narzut, gdyż najpierw sprawdzane jest to czy dany obiekt istnieje. Jeżeli, tak to jest on aktualizowany, jeżeli nie to dodaje ten obiekt

Różnica pomiędzy clear(), evict() i close():
- clear (); kiedy metoda jest wywoływana w obrębie tranzakcji wtedy wszystkie obiekty powiązane z sesja będą rozłączone/wyczyszczone albo nie będą więcej powiązane z instancją sesji.
- evict(): usuwa obiekt z sesji, używana jest do odłączenia określonego obiektu z sesji
- close(): kończy sesje, zwalnia połączenie z JDBC i czyści